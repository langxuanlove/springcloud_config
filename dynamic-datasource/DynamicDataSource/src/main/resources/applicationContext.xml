<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

  
  <context:property-placeholder location="classpath:jdbc.properties"/>
  <context:component-scan base-package="com.qiang.dao"/>
  
  
  
  
  <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource">
  		<!-- 连接池最大使用连接数 -->
		<property name="maxActive">
			<value>20</value>
		</property>
		<!-- 初始化连接大小 -->
		<property name="initialSize">
			<value>1</value>
		</property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait">
			<value>60000</value>
		</property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle">
			<value>20</value>
		</property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle">
			<value>3</value>
		</property>
		<!-- 自动清除无用连接 -->
		<property name="removeAbandoned">
			<value>true</value>
		</property>
		<!-- 清除无用连接的等待时间 -->
		<property name="removeAbandonedTimeout">
			<value>180</value>
		</property>
		<!-- 连接属性 -->
		<property name="connectionProperties">
			<value>clientEncoding=UTF-8</value>
		</property>
  </bean>
  <bean id="masterDataSource" parent="parentDataSource">
		<property name="driverClassName">
			<value>${master.jdbc.driverClass}</value>
		</property>
		<property name="url">
			<value>${master.jdbc.jdbcUrl}</value>
		</property>
		<property name="username">
			<value>${master.jdbc.user}</value>
		</property>
		<property name="password">
			<value>${master.jdbc.password}</value>
		</property>
		
	</bean>
	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="driverClassName">
			<value>${slave.jdbc.driverClass}</value>
		</property>
		<property name="url">
			<value>${slave.jdbc.jdbcUrl}</value>
		</property>
		<property name="username">
			<value>${slave.jdbc.user}</value>
		</property>
		<property name="password">
			<value>${slave.jdbc.password}</value>
		</property>
	</bean>
	
	<!-- 用于动态选择主、从数据库的数据源实现 -->
	<bean id="dataSource" class="com.qiang.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDataSource" />
				<entry key="slave" value-ref="slaveDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>
	
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource"/>
	    <property name="mapperLocations">
	      <array>
	        <value>classpath:mapper/*.xml</value>
	      </array>
	    </property>
	    <property name="typeAliasesPackage" value="com.qiang.model"/>
	    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

  	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.qiang.mapper"/>
  	</bean>
  	
  	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
    	<constructor-arg index="0" ref="sqlSessionFactory"/>
  	</bean>

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  
  <aop:aspectj-autoproxy proxy-target-class="true"/>
  <bean class="com.qiang.advice.DataSourceAdvice"></bean>
</beans>